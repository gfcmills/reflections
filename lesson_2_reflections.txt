What happens when you initialize a repository? Why do you need to do it?

When you initialise a repo, git starts tracking changes in it. If you don't initialise a repo, there is no way for git to track changes, which means it can't merge or revert to alternative versions. NB initialising creates a .git file in the folder which the repo is based on. In this folder, git tracks all the changes between different commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a place to break down commits into logical chunks. This means you can commit a logically separated piece of work even if you've moved on to the next thing.

How can you use the staging area to make sure you have one commit per logical change?

You can add only one file at a time to the staging area, and commit that alone. Or, you could add some but not all files, taking care to only add the files that were relevant for a particular change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you were trying out an experimental feature, or making a different version of a program it would be helpful to keep those versions separate.

How do the diagrams help you visualize the branch structure?

Because git allows non-linear development, diagrams help show the different branches in a repository.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It combined all of the changes made on two distinct branches with the same root into one branch. That means that we merged two workflows into one. It's represented as two branches rejoining at the head. The different branches show their original parents in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git merges automatically when it is reasonably sure that the changes have no conflicts. This saves a lot of time, and is the purpose of the merge function in git. However, when there is a conflict, it's difficult for git to know how to resolve it. Therefore git takes the approach that when there is a conflict is it best for humans to resolve it. This may mean getting up and actually talking to someone (gasp!), though it's often possible to understand what's going on and resolve the conflict before committing changes and completing a merge.